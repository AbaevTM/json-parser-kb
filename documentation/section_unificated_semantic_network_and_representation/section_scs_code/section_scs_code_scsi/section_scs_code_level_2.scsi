scs_code_2_level => nrel_main_idtf: 
		[SCs-код уровня 2] (*<-lang_ru;;*) ;
		[SCs-level code 2] (*<-lang_en;;*) ;

<- rrel_key_sc_element:
		..scs_code_level_2_explanation
		(*
		<- sc_explanation;;
		<= nrel_sc_text_translation:	
			..translation_scs_code_level_2_ru
			(*
			-> rrel_example:
	[
	На данном уровне SCs-кода вводятся средства минимизации числа специально придумываемых имен sc-коннекторов.
	К таким средствам относятся: 
	1) Алфавит изображений sc-коннекторов, отражающих тип изображаемых sc-коннекторов.
	2) Неатомарные имена sc-коннекторов, построенные на основе sc-коннекторов.
	](*<-lang_ru;;*) ;;
			*);;

		<= nrel_sc_text_translation:	
			..translation_scs_code_level_2_en
			(*
			-> rrel_example:
	[
	Means to minimize the number of specially invent names of sc-connectors are introduced at this level of SCs-code.
Such tools include:
1.	Alphabet images of sc-connectors, reflecting the type of depicted sc-connectors.
2.	Non-atomic names of sc-connectors,  that are based on sc-connectors.
	](*<-lang_en;;*) ;;
			*);;
	*);;


scs_sentence_2_level => nrel_main_idtf: 
		[sc.s-предложение уровня 2] (*<-lang_ru;;*) ;
		[sc.s-2 level sentences] (*<-lang_en;;*) ;
		
<- rrel_key_sc_element:
		..scs_sentence_level_2_explanation
		(*
		<- sc_explanation;;
		<= nrel_sc_text_translation:	
			..translation_scs_sentence_level_2_ru
			(*
			-> rrel_example:
	[
	В sc.s-предложениях уровня 2 обеспечивается возможность не вводить имена для всех sc-коннекторов.
	Для этого вводятся sc.s-разделители, являющиеся изображениями sc-коннекторов (например ∍ ), а также неатомарные идентификаторы коннекторов вида (...). Ниже отдельно приведена таблица sc.s-разделителей, являющихся изображениями sc-коннекторов.
	В случае наличия кратных коннекторов между некоторыми sc-элементами с целью избежания омонимии вводятся суффиксы, например (v1 -> v2)1, (v1 -> v2)2.
	Использование неатомарных идентификаторов вида <...>, {...}, \[*...*\], \[...\] не разрешается.
	](*<-lang_ru;;*) ;;
			*);;

		<= nrel_sc_text_translation:	
			..translation_scs_sentence_level_2_en
			(*
			-> rrel_example:
	[
	The possibility of not to enter names for all sc-connectors is provided in sc.s-2 level sentences.  For this purpose we introduce sc.s-delimiters, which are images of sc-connectors (e.g. ∍ ), as well as non-atomic IDs connectors type of (...).There is a table of sc.s-delimiters that are images sc-connectors below. If there are multiples of connectors between some sc-elements, suffixes are introduced, in order to avoid homonymy, for example (v1 -> v2)1, (v1 -> v2)2.
Using non-atomic identifiers such as <...>, {...}, \[* ... *\], \[...\] is not permitted.
	](*<-lang_en;;*) ;;		
			*);;
	*);

=> nrel_generalized_syntax_structure:
	[
	<" имя sc-элемента "> ::= (" <" атомарное имя sc-элемента "> || <" неатомарное имя sc-элемента "> ")
	<" неатомарное имя sc-элемента "> ::= ( <" имя sc-элемента "> <" изображение коннектора "> <" имя sc-элемента "> ) \[" суффикс "\]
	<" sc.s-предложение уровня 2 "> ::= <" имя sc-элемента "> <" изображение коннектора "> <" имя sc-элемента "> ;;
	]
	(*
		<- Backus_naur_metalanguage ;;
		<-lang_ru;;
	*);

=> nrel_generalized_syntax_structure:
	[
	<" name of sc-element "> ::= (" <" atomic name of sc-element "> || <" not atomic name of sc-element "> ")
	<" not atomic name of sc-element "> ::= ( <" name of sc-element "> <" image of connector "> <" name of sc-element "> ) \["suffix"\]
	<" sc.s-2 level sentences "> ::= <" name of sc-element "> <" image of connector "> <" name of sc-element "> ;;
	]
	(*
		<- Backus_naur_metalanguage ;;
		<-lang_en;;
	*);

-> rrel_example:
	[
	сторона* ∍ ( Четырехугк(ТчкА;ТчкВ;ТчкС;ТчкD) => Отр(ТчкВ;ТчкС) );;
	](*<-lang_ru;;*) ;
-> rrel_example:
	[
	side*  ∍ ( Tetragon(PntА;PntВ;PntС;PntD) => Seg(PntВ;PntС) );;
	](*<-lang_en;;*) ;
-> rrel_example:
	[
	включение* ∍ ( Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкВ;ТчкС) );;
	](*<-lang_ru;;*) ;
-> rrel_example:
	[
	inclusion *  ∍ Triangle(PntВ;PntС;PntD) => Seg(PntВ;PntС) );;
	](*<-lang_en;;*) ;;
	

scs_text_2_level => nrel_main_idtf: 
	[sc.s-текст уровня 2](*<-lang_ru;;*) ;
	[sc.s-text of level 2](*<-lang_en;;*) ;

<- rrel_key_sc_element:
		..scs_text_level_2_explanation
		(*
		<- sc_explanation;;
		<= nrel_sc_text_translation:	
			..translation_scs_text_level_2_ru
			(*
			-> rrel_example:
	[sc.s-текст уровня 2 - sc.s-текст, содержащий хотя бы одно sc.s-предложение уровня 2 и не содержащий sc.s-предложений уровня 3 и выше
	](*<-lang_ru;;*) ;;
			*);;

		<= nrel_sc_text_translation:	
			..translation_scs_text_level_2_en
			(*
			-> rrel_example:
	[sc.s-2 level-text is sc.s-text, that contains at least one sc.s sentence level 2 and doesn’t contain  sc.s-3 level sentence and above.
	](*<-lang_en;;*);;
			*);;
		*);
-> rrel_example:
	[
	сторона* ∍ ( Четырехугк(ТчкА;ТчкВ;ТчкС;ТчкD) => Отр(ТчкВ;ТчкС) );;
	сторона* ∍ ( Четырехугк(ТчкА;ТчкВ;ТчкС;ТчкD) => Отр(ТчкС;ТчкD) );;
	сторона* ∍ ( Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкВ;ТчкС) );;
	сторона* ∍ ( Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкС;ТчкD) );;
	сторона* ∍ ( Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкB;ТчкD) );;
	включение* ∍ ( Четырехугк(ТчкА;ТчкВ;ТчкС;ТчкD) => Отр(ТчкВ;ТчкС) );;
	включение* ∍ ( Четырехугк(ТчкА;ТчкВ;ТчкС;ТчкD) => Отр(ТчкС;ТчкD) );;
	включение* ∍ ( Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкВ;ТчкС) );;
	включение* ∍ (Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкС;ТчкD) );;
	включение* ∍ ( Треугк(ТчкВ;ТчкС;ТчкD) => Отр(ТчкB;ТчкD) );;
	четырехугольник ∍ Четырехугк(ТчкА;ТчкВ;ТчкС;ТчкD);;
	треугольник ∍ Треугк(ТчкВ;ТчкС;ТчкD);;
	декомпозиция фигуры* ∍ ( link1 => Треугк(ТчкВ;ТчкС;ТчкD) );;
	link1 ∍ Отр(ТчкВ;ТчкС);;
	link1 ∍ Отр(ТчкC;ТчкD);;
	link1 ∍ Отр(ТчкВ;ТчкD);;
	]
	(*
		<- rrel_key_sc_element:
		..scs_text_level_2_example_explanation
		(*
		<- sc_explanation;;
		<= nrel_sc_text_translation:	
			..translation_scs_text_level_2_example_ru
			(*
			-> rrel_example:
		[
Можно заметить, что в данном примере отсутствуют имена sc-коннекторов, которые были искусственно введены для представления данного фрагмента в SCs-коде уровня 1, поскольку они заменены соответствующими изображениями sc-коннекторов.
		](*<-lang_ru;;*);;
			*);;
		*);;
	*);

-> rrel_example:
	[
	side* ∍ ( Tetragon(PntА;PntВ;PntС;PntD) => Seg(PntВ;PntС) );;
	side* ∍ ( Tetragon(PntА;PntВ;PntС;PntD) => Seg(PntС;PntD) );;
	side* ∍ ( Triangle(PntВ;PntС;PntD) => Seg(PntВ;PntС) );;
	side* ∍ ( Triangle(PntВ;PntС;PntD) => Seg(PntС;PntD) );;
	side* ∍ ( Triangle(PntВ;PntС;PntD) => Seg(PntB;PntD) );;
	inclusion*  ∍ ( Tetragon(PntА;PntВ;PntС;PntD) => Seg(PntВ;PntС) );;
	inclusion*  ∍ ( Tetragon(PntА;PntВ;PntС;PntD) => Seg(PntС;PntD) );;
	inclusion*  ∍ ( Triangle(PntВ;PntС;PntD) => Seg(PntВ;PntС) );;
	inclusion* ∍ (Triangle(PntВ;PntС;PntD) => Seg(PntС;PntD) );;
	inclusion* ∍ ( Triangle(PntВ;PntС;PntD) => Seg(PntB;PntD) );;
	tetragon ∍ Tetragon(PntА;PntВ;PntС;PntD);;
	triangle ∍ Triangle(PntВ;PntС;PntD);;
	decomposition of figure* ∍ ( link1 => Triangle(PntВ;PntС;PntD) );;
	link1 ∍ Seg(PntВ;PntС);;
	link1 ∍ Seg(PntC;PntD);;
	link1 ∍ Seg(PntВ;PntD);;
	]
	(*
	<- rrel_key_sc_element:
		..scs_text_level_2_example_explanation2
		(*
		<- sc_explanation;;
		<= nrel_sc_text_translation:	
			..translation_scs_text_level_2_example_en
			(*
			-> rrel_example:
		[
As you can see, there are no names of sc-connectors, which have been artificially introduced for the submission of this fragment in the SCs-code level 1, because they are replaced with corresponding images of sc-connectors.
		](*<-lang_en;;*);;
			*);;
		*);;
	*);;
